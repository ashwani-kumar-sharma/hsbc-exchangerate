plugins {
    id 'com.github.kt3k.coveralls' version '2.3.1'
    id 'de.aaschmid.cpd' version '1.0'
    id 'eclipse'
    id 'groovy'
    id 'jacoco'
    id 'java'
    id 'findbugs'
    id 'osgi'
}

archivesBaseName = 'junit-dataprovider'
description = 'A TestNG like dataprovider runner for JUnit having a simplified syntax compared to all the existing JUnit features.'
group = 'com.tngtech.java'
version = '1.12.1-SNAPSHOT'

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_6

ext {
    isBuildOnJenkins = System.env['BUILD_TAG']?.startsWith('jenkins-') ?: false
}
if (!hasProperty('junitVersion')) { // set default junit version if not set via command line
    ext.junitVersion = '4.12'
}
ext.skipFindBugs = hasProperty('skipFindBugs')
println "Using junit version ${junitVersion} for current build (skipFindBugs = ${skipFindBugs})."

repositories {
    mavenCentral()
}

sourceSets {
    integTest {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    integTestCompile {
        extendsFrom testRuntime
    }
}

dependencies {
    compile group: 'junit', name: 'junit', version: junitVersion

    testCompile group: 'com.google.code.findbugs', name: 'annotations', version: '3.0.1'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '1.7.1'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.2.7'

    integTestCompile group: 'org.codehaus.groovy', name: 'groovy', version: '2.4.7'
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
}

jar {
    manifest {
        def title = 'JUnit dataprovider'
        def company = 'TNG Technology Consulting GmbH'
        def copyright = "${new Date()[Calendar.YEAR]} ${company}"

        attributes (
            'Built-By': "Gradle ${gradle.gradleVersion}",
            'Built-Date': new Date(), // TODO destroys incremental build feature
            'Specification-Title': title,
            'Specification-Version': version,
            'Specification-Vendor': company,
            'Implementation-Title': title,
            'Implementation-Version': version,
            'Implementation-Vendor': company,
            'Issue-Tracker': 'https://github.com/TNG/junit-dataprovider/issues',
            'Documentation-URL': 'https://github.com/TNG/junit-dataprovider/wiki',
            'Copyright': copyright,
            'License': 'Apache License v2.0, January 2004'
        )

        // OSGi / p2 plugin information
        instruction 'Bundle-Vendor', company
        instruction 'Bundle-Copyright', copyright
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

test {
    ignoreFailures = isBuildOnJenkins
}

task touchTestResultsForJenkins(type: TouchTestResults) {
    tasks test
    enabled = isBuildOnJenkins
}
build.dependsOn touchTestResultsForJenkins

task integTest(dependsOn: integTestClasses, type: Test, group: 'verification', description: 'Runs all integration tests.') {
    ignoreFailures = isBuildOnJenkins

    classpath = sourceSets.integTest.runtimeClasspath
    testClassesDir = sourceSets.integTest.output.classesDir
}
task touchIntegTestResultsForJenkins(type: TouchTestResults) {
    tasks integTest
    enabled = isBuildOnJenkins
}
build.dependsOn touchIntegTestResultsForJenkins

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
    }
}
jacoco {
    toolVersion = '0.7.7.201606060606'
}

cpd {
    if (System.getProperty("java.version")[0..2] in [ '1.5', '1.6' ]) { // PMD / CPD v5.4.0 does not work with Java < v1.7 :-(
        toolVersion = '5.3.7'
    } else {
        toolVersion = '5.5.1'
    }
}

findbugs {
    if (System.getProperty("java.version")[0..2] in [ '1.5', '1.6' ]) { // FindBugs v3.0.0 does not work with Java < v1.7 :-(
        toolVersion = '2.0.3'
    } else {
        toolVersion = '3.0.1'
    }
    ignoreFailures = true
}
tasks.withType(FindBugs).each { task ->
    task.enabled = !skipFindBugs
}

cpdCheck {
    ignoreFailures = true
    minimumTokenCount = 25
    source = sourceSets.main.java.srcDirs + sourceSets.test.java.srcDirs // don't do check for groovy
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

// -- build and publish artifacts -------------------------------------------------------------------------------------

apply plugin: 'maven'
apply plugin: 'signing'


signing {
    // requires gradle.properties, see http://www.gradle.org/docs/current/userguide/signing_plugin.html
    required {
        gradle.taskGraph.hasTask('uploadArchives')
    }
    sign configurations.archives
}

if (!hasProperty('sonatypeUsername')) {
	ext.sonatypeUsername = ''
}
if (!hasProperty('sonatypePassword')) {
	ext.sonatypePassword = ''
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { deployment ->
                signing.signPom(deployment)
            }
            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                // username and password from gradle.properties
                authentication(userName: sonatypeUsername, password: sonatypePassword )
            }
            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                authentication(userName: sonatypeUsername, password: sonatypePassword )
            }

            pom {
                project {
                    name 'junit-dataprovider'
                    packaging 'jar'
                    description 'A TestNG like dataprovider runner for JUnit'
                    url 'https://github.com/TNG/junit-dataprovider'

                    scm {
                        url 'scm:git@github.com:TNG/junit-dataprovider.git'
                        connection 'scm:git@github.com:TNG/junit-dataprovider.git'
                        developerConnection 'scm:git@github.com:TNG/junit-dataprovider.git'
                    }

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'aaschmid'
                            name 'Andreas Schmid'
                        }
                    }
                }
                whenConfigured { pom ->
                    pom.dependencies.find{ dep -> dep.groupId == 'junit' && dep.artifactId == 'junit' }.with {
                        version = '[4.8.2,4.12]'
                        scope = 'provided'
                    }
                    pom.dependencies.removeAll(pom.dependencies.findAll{ dep -> dep.scope in [ 'compile', 'test' ] })
                }
            }
        }
    }
}

// -- Custom tasks ------------------------------------------------------------
/**
 * Task to touch all junit xml report files for all given {@link Test} {@code tasks}.
 * This is required due to Jenkins fails if test output is created before build starts which
 * could happen using Gradle's up-to-date feature :(
 */
class TouchTestResults extends DefaultTask {
    @InputFiles
    def tasks

    @javax.inject.Inject
    public TouchTestResults(org.gradle.internal.reflect.Instantiator instantiator) {
        super()
        tasks = new org.gradle.api.internal.tasks.DefaultTaskCollection(DefaultTask.class, instantiator, project)
    }

    def tasks(Test... testTasks) {
        tasks.addAll(testTasks)
        mustRunAfter(testTasks)
    }

    @TaskAction
    void touch() {
        tasks.each { test ->
            def testResultsDir = test.reports.junitXml.destination
            if (testResultsDir.exists()) {
                def timestamp = System.currentTimeMillis()
                testResultsDir.eachFile{ file -> file.lastModified = timestamp }
            }
        }
    }
}
